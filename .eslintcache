[{"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\index.js":"1","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\App.js":"2","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\reportWebVitals.js":"3","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Header.js":"4","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Newsfeed.js":"5","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Stats.js":"6","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\LineGraph.js":"7","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\StatsRow.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":483,"mtime":1608602874271,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":783,"mtime":1608596095634,"results":"13","hashOfConfig":"10"},{"size":554,"mtime":1608611335348,"results":"14","hashOfConfig":"10"},{"size":1890,"mtime":1609274550163,"results":"15","hashOfConfig":"10"},{"size":2135,"mtime":1608765920757,"results":"16","hashOfConfig":"10"},{"size":750,"mtime":1609366719165,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"18uzqy6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\index.js",[],["38","39"],"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\App.js",[],"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\reportWebVitals.js",[],"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Header.js",["40","41","42","43","44"],"import React from \"react\";\r\nimport Logo from \"./robinhood.svg\";\r\nimport \"./Header.css\";\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header_wrapper\">\r\n      {/* logo */}\r\n      <div className=\"header_logo\">\r\n        <img src={Logo} width={25} alt=\"robinhood logo\" />\r\n      </div>\r\n      {/* search */}\r\n      <div className=\"header_search\">\r\n        <div className=\"header_searchContainer\">\r\n          <input placeholder=\"Search\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      {/* menuitems */}\r\n      <div className=\"header_menuItems\">\r\n        <a href=\"#\">Free stocks</a>\r\n        <a href=\"#\">Portfolio</a>\r\n        <a href=\"#\">Cash</a>\r\n        <a href=\"#\">Messages</a>\r\n        <a href=\"#\">Account</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Newsfeed.js",[],"C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\Stats.js",["45"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Stats.css\";\r\nimport axios from \"axios\";\r\nimport StatsRow from \"./StatsRow\";\r\nconst TOKEN = \"bvldmdf48v6qdeqd6470\";\r\nconst BASE_URL = \"https://finnhub.io/api/v1/quote\";\r\nfunction Stats() {\r\n  const [stockData, setStockData] = useState([]);\r\n  const getStocksData = (stock) => {\r\n    return axios\r\n      .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\r\n      .catch((error) => {\r\n        console.error(\"Error\", error.message);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    let tempStocksData = [];\r\n    const stocksList = [\r\n      \"AAPL\",\r\n      \"MSFT\",\r\n      \"TSLA\",\r\n      \"FB\",\r\n      \"BABA\",\r\n      \"UBER\",\r\n      \"DIS\",\r\n      \"SBUX\",\r\n    ];\r\n    let promises = [];\r\n    stocksList.map((stock) => {\r\n      promises.push(\r\n        getStocksData(stock).then((res) => {\r\n          console.log(res);\r\n          tempStocksData.push({\r\n            name: stock,\r\n            ...res.data,\r\n          });\r\n        })\r\n      );\r\n    });\r\n    Promise.all(promises).then(() => {\r\n      setStockData(tempStocksData);\r\n      console.log(tempStocksData);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"stats\">\r\n      <div className=\"stats_container\">\r\n        <div className=\"stats_header\">\r\n          <p>Stocks</p>\r\n        </div>\r\n        <div className=\"stats_content\">\r\n          <div className=\"stats_rows\"></div>\r\n        </div>\r\n        <div className=\"stats_header\">\r\n          <p>Lists</p>\r\n        </div>\r\n        <div className=\"stats_content\">\r\n          <div className=\"stats_rows\">\r\n            {stockData.map((stock) => (\r\n              <StatsRow\r\n                key={stock.name}\r\n                name={stock.name}\r\n                openPrice={stock.o}\r\n                price={stock.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\LineGraph.js",["46"],"import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./LineGraph.css\";\r\nfunction LineGraph() {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const data = [\r\n    { x: 10, y: 20 },\r\n    { x: 15, y: 10 },\r\n    { x: 25, y: 24 },\r\n    { x: 5, y: 19 },\r\n    { x: 12, y: 4 },\r\n  ];\r\n\r\n  const createMockData = () => {\r\n    let data = [];\r\n    let value = 50;\r\n    for (var i = 0; i < 366; i++) {\r\n      let date = new Date();\r\n      date.setHours(0, 0, 0, 0);\r\n      date.setDate(i);\r\n      value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random() * 10);\r\n      data.push({ x: date, y: value });\r\n    }\r\n    setGraphData(data);\r\n  };\r\n  useEffect(() => {\r\n    createMockData();\r\n  }, []);\r\n  return (\r\n    <div className=\"linegraph\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              type: \"line\",\r\n              data: graphData,\r\n              backgroundColor: \"black\",\r\n              borderColor: \"#5AC53B\",\r\n              borderWidth: 2,\r\n              pointBorderColor: \"rgba(0, 0, 0, 0)\",\r\n              pointBackgroundColor: \"rgba(0, 0, 0, 0)\",\r\n              pointHoverBackgroundColor: \"#5AC53B\",\r\n              pointHoverBorderColor: \"#000000\",\r\n              pointHoverBorderWidth: 4,\r\n              pointHoverRadius: 6,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltips: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"time\",\r\n                time: {\r\n                  format: \"MM/DD/YY\",\r\n                  tooltipFormat: \"ll\",\r\n                },\r\n                ticks: { display: false },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  display: false,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n// make cursor\r\n","C:\\Users\\joshb\\Desktop\\code\\Robinhood-clone\\src\\StatsRow.js",["47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":19,"column":9,"nodeType":"54","endLine":19,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":20,"column":9,"nodeType":"54","endLine":20,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":21,"column":9,"nodeType":"54","endLine":21,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":22,"column":9,"nodeType":"54","endLine":22,"endColumn":21},{"ruleId":"52","severity":1,"message":"53","line":23,"column":9,"nodeType":"54","endLine":23,"endColumn":21},{"ruleId":"55","severity":1,"message":"56","line":29,"column":28,"nodeType":"57","messageId":"58","endLine":29,"endColumn":30},{"ruleId":"59","severity":1,"message":"60","line":6,"column":9,"nodeType":"61","messageId":"62","endLine":6,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":15,"column":9,"nodeType":"54","endLine":15,"endColumn":43},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]